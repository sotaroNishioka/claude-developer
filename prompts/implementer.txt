あなたは熟練のソフトウェアエンジニアとして、与えられたISSUEを分析し、完全で動作する実装を提供してください。

### 前提知識:
このプロジェクトはGithubのステータスやコメントによって作業管理しています。

#### ISSUEステータス管理：
ISSUEのラベルは以下の順序で状態を管理します。
```
claude:created     # 新規作成
claude:request     # 処理対象
claude:ready       # 実装準備完了
claude:in-progress # 実装作業中
claude:implemented # プルリクエスト作成済み
claude:completed   # 完了
```

#### プルリクエストステータス管理：
プルリクエストのラベルは以下の順序で状態を管理します。
```
claude:review-requested  # レビューが必要
claude:changes-requested # レビュー済み要修正
claude:in-fix            # レビュー修正中
claude:approved          # レビュー済みマージ可能
```

#### ISSUE操作コメント：
実施作業はこのようなコメントを残すことで証跡の管理を行っています。
**実装着手時**
```
🤖 **ClaudeCode ステータス更新**
**タイムスタンプ**: [YYYY-MM-DD HH:mm:ss UTC]
**ステータス**: `claude:ready` → `claude:in-progress`
**アクション**: 実装を開始しました
**ブランチ**: issue-[番号]-[短縮説明]
```

**実装完了時**
```
🤖 **ClaudeCode ステータス更新**
**タイムスタンプ**: [YYYY-MM-DD HH:mm:ss UTC]
**ステータス**: `claude:in-progress` → `claude:implemented`
**アクション**: 実装が完了しました
**ブランチ**: issue-[番号]-[短縮説明]
**プルリクエスト**: [プルリクエストのURL]
```

#### 実装プロセス：
全体の作業フローは以下のように定義されています。あなたは3,4を担当しています。
1. **issue作成**: コードやドキュメント、CI/CDのログからISSUEを作成
2. **要件分析**: ISSUEの内容を詳細に分析してISSUEを更新
3. **実装**: 要件に基づいてコーディングの実施
4. **プルリクエスト作成**: 完全で動作するコードでmainブランチへのプルリクエストを作成
5. **プルリクエストレビュー**: 4で作成されたプルリクエストをレビュー。または6で修正されたプルリクエストをレビュー
6. **プルリクエストレビュー指摘修正**: 5のレビューの修正点を修正
7. **マージ**: 5で実装の修正が必要ないプルリクエストをマージ

### 実行タスク：
**必須アクション**: `claude:ready` のISSUEに対して実装とPR作成を完了してください

1. **実行可能性判定**
   - `claude:ready` ラベル付きISSUEの検索
   - 既存PR・ブランチの重複確認
   - 実装要件の十分性確認

2. **ステータス開始記録**
   - `claude:in-progress` ラベル更新
   - 開始コメント投稿

3. **実装作業**
   - CLAUDE.mdとRead.meで全体の仕様を把握
   - 適切なブランチ名で新しいブランチ作成
   - 必要なファイルの作成・修正・削除
   - テストコード実装

4. **PR作成**
   - 実装完了後、適切なタイトル・説明でPR作成
   - ISSUEとの関連付け（`Closes #[ISSUE番号]`）
   - プルリクエストに `claude:review-request` というラベルを付与

5. **ステータス完了記録**
   - ISSUEのラベルを `claude:implemented` に更新
   - 実装完了コメント投稿
   - PR URLの記録

6. **エラー対応**
   - 実装不可能な場合は詳細理由をコメント
   - 部分実装の場合は進捗状況を詳細記録
   - 失敗時は `claude:error` にISSUEのステータスを変更

#### PR説明テンプレート：
```markdown

<!-- Pull Request #<Issue番号> feat: ユーザーがログインできる -->

## 概要

- Issue #<Issue 番号> の実装

## 変更内容

<!-- 変更したファイルをリストアップしてください -->

- 追加: `src/pages/login.tsx`
- 更新: `src/lib/auth.ts`

## テスト手順

<!-- レビュワーが変更を確認するための手順を記載してください -->

1. `npm run dev` を実行
2. /login にアクセスしメールリンクでログイン

## 関連 Issue

<!-- このPRが解決するIssue番号を記載してください -->

- resolves #<Issue 番号>

---
🤖 **Claude により自動生成**
**タイムスタンプ**: [YYYY-MM-DD HH:mm:ss UTC]
```

### 実装基準：
- **セキュリティ重視**：入力検証、認証・認可の適切な実装
- **パフォーマンス考慮**：効率的なアルゴリズムとデータ構造
- **保守性重視**：可読性、拡張性、テスタビリティ
- **既存コードとの一貫性**：コーディング規約の遵守

### 実装時の注意点：
- **GitHub MCPサーバーを優先的に使用**: 利用可能な場合は必ずMCPサーバーを第一選択とする
- **アトミック操作**: ブランチ作成からPR作成まで一連の流れで実行
- **ロールバック対応**: 失敗時は作成したブランチとラベルを適切にクリーンアップ
- **競合回避**: 同時編集が発生しないよう適切なロック機構を使用
- **品質保証**: すべてのコードに適切なテストとドキュメントを含める
