# =============================================================================
# Claude Code 統合開発自動化 - 設定ファイル
# =============================================================================

# プロジェクト設定
export PROJECT_PATH="/path/to/your/project"
export PROJECT_NAME="MyProject"
export PROJECT_TYPE="web-app"  # web-app, api, library, mobile, etc.

# 基本設定
export MAX_ISSUES=5
export MAX_IMPLEMENTATIONS=3
export DRY_RUN=false

# 自動化制御
export AUTO_IMPLEMENT=false        # ISSUE自動実装
export AUTO_REVIEW=true            # PR自動レビュー
export AUTO_IMPROVE_ISSUES=true    # 既存ISSUE改善
export AUTO_MONITOR_WORKFLOWS=true # ワークフロー監視

# ログ設定
export LOG_FILE="/var/log/claude_dev_automation.log"
export DEBUG_MODE=false
export VERBOSE_LOGGING=true

# GitHub設定
export GITHUB_OWNER="your-username"
export GITHUB_REPO="your-repository"
export BRANCH_PREFIX="claude-auto"
export DEFAULT_BRANCH="main"

# Claude Code設定
export CLAUDE_MODEL="claude-sonnet-4"
export CLAUDE_TIMEOUT=300
export CLAUDE_MAX_RETRIES=3

# ISSUE作成設定
export ISSUE_TYPES="bug,feature,improvement,documentation,security,performance"
export EXCLUDED_LABELS="wontfix,duplicate,invalid"
export MIN_PRIORITY="low"  # low, medium, high
export AUTO_ASSIGN_ISSUES=false
export DEFAULT_ASSIGNEE=""

# 実装設定
export IMPLEMENTATION_STRATEGY="conservative"  # conservative, moderate, aggressive
export AUTO_CREATE_TESTS=true
export AUTO_UPDATE_DOCS=true
export COMMIT_MESSAGE_PREFIX="fix:"
export REQUIRE_MANUAL_APPROVAL=true

# レビュー設定
export REVIEW_CRITERIA="strict"  # lenient, normal, strict
export AUTO_APPROVE_SIMPLE=false
export REQUEST_CHANGES_THRESHOLD="medium"  # low, medium, high
export REVIEW_TIMEOUT=1800  # 30分

# フィルタリング設定
export FOCUS_AREAS="security,performance,maintainability,testing"
export EXCLUDED_PATTERNS="*.md,*.txt,LICENSE,*.json"
export PRIORITY_FILES="src/**/*.js,src/**/*.ts,**/*.py,**/*.go"

# 通知設定
export SLACK_WEBHOOK_URL=""
export DISCORD_WEBHOOK_URL=""
export EMAIL_RECIPIENTS=""
export NOTIFICATION_EVENTS="error,completion,critical_review"

# 高度な設定
export RATE_LIMIT_DELAY=5
export BACKUP_COUNT=30
export CLEANUP_OLD_BRANCHES=true
export BRANCH_RETENTION_DAYS=7

# AI行動制御
export AI_CREATIVITY_LEVEL="balanced"  # conservative, balanced, creative
export ENABLE_EXPERIMENTAL_FEATURES=false
export CUSTOM_PROMPT_TEMPLATES_DIR=""

# セキュリティ設定
export REQUIRE_SIGNED_COMMITS=false
export SECURITY_SCAN_BEFORE_MERGE=true
export VULNERABILITY_THRESHOLD="medium"

# パフォーマンス設定
export MAX_CONCURRENT_OPERATIONS=3
export OPERATION_TIMEOUT=3600
export CACHE_ENABLED=true
export CACHE_TTL=3600

# プロジェクト固有設定
export CUSTOM_PROMPT_PREFIX="このプロジェクトは${PROJECT_NAME}(${PROJECT_TYPE})です。"
export TECH_STACK="javascript,react,node.js"
export CODING_STANDARDS_URL=""
export PROJECT_GUIDELINES=""

# 環境別設定
export ENVIRONMENT="production"  # development, staging, production
export DEPLOY_ON_MERGE=false
export RUN_E2E_TESTS=true

# 統計・分析設定
export COLLECT_METRICS=true
export METRICS_ENDPOINT=""
export ANALYTICS_ENABLED=false

# =============================================================================
# 使用例とプリセット
# =============================================================================

# 開発初期段階用プリセット
if [ "$PROJECT_PHASE" = "initial" ]; then
    export AUTO_IMPLEMENT=false
    export MAX_ISSUES=10
    export FOCUS_AREAS="architecture,documentation,setup"
    export AI_CREATIVITY_LEVEL="creative"
fi

# アクティブ開発用プリセット
if [ "$PROJECT_PHASE" = "active" ]; then
    export AUTO_IMPLEMENT=true
    export MAX_IMPLEMENTATIONS=5
    export FOCUS_AREAS="features,testing,performance"
    export AUTO_REVIEW=true
fi

# メンテナンス用プリセット
if [ "$PROJECT_PHASE" = "maintenance" ]; then
    export AUTO_IMPLEMENT=false
    export MAX_ISSUES=3
    export FOCUS_AREAS="security,performance,dependencies"
    export REVIEW_CRITERIA="strict"
fi

# 本番環境用プリセット
if [ "$ENVIRONMENT" = "production" ]; then
    export REQUIRE_MANUAL_APPROVAL=true
    export SECURITY_SCAN_BEFORE_MERGE=true
    export AUTO_APPROVE_SIMPLE=false
    export IMPLEMENTATION_STRATEGY="conservative"
fi

# =============================================================================
# カスタム関数（オプション）
# =============================================================================

# プロジェクト固有の前処理
custom_pre_process() {
    # カスタムロジックをここに追加
    log "カスタム前処理を実行中..."
}

# プロジェクト固有の後処理
custom_post_process() {
    # カスタムロジックをここに追加
    log "カスタム後処理を実行中..."
}

# =============================================================================
# 使用方法
# =============================================================================

# このファイルを読み込んでスクリプトを実行:
# source /path/to/config.env && ./claude_dev_automation.sh

# 環境変数として一括設定:
# export $(grep -v '^#' /path/to/config.env | grep -v '^$' | xargs)
# ./claude_dev_automation.sh

# 特定の設定のみ上書き:
# PROJECT_PATH=/custom/path AUTO_IMPLEMENT=true ./claude_dev_automation.sh

# 段階的設定:
# PROJECT_PHASE=initial source config.env && ./claude_dev_automation.sh