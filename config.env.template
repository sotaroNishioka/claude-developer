# =============================================================================
# Claude Code 統合開発自動化 - 設定ファイル（詳細説明付き）
# =============================================================================

# =============================================================================
# 基本プロジェクト設定
# =============================================================================

# プロジェクトのルートディレクトリパス
# 自動化スクリプトが動作する対象プロジェクトのフルパスを指定
export PROJECT_PATH="/path/to/your/project"

# プロジェクト名（ISSUE生成時のコンテキストとして使用）
# Claude Codeがプロジェクトを理解するための識別子
export PROJECT_NAME="MyProject"

# プロジェクトタイプ（分析・実装戦略の決定に影響）
# 選択肢: web-app, api, library, mobile, cli-tool, data-science, etc.
export PROJECT_TYPE="web-app"

# =============================================================================
# 実行制御設定
# =============================================================================

# 最大ISSUE作成数（プロジェクト分析での新規ISSUE生成上限）
# 値が大きすぎると大量のISSUEが作成されるリスクがある
export MAX_ISSUES=5

# 最大自動実装数（1回の実行で実装するISSUE数の上限）
# リソース使用量とリスク管理のバランスを考慮
export MAX_IMPLEMENTATIONS=3

# ドライランモード（true: 実際の変更を行わず動作確認のみ）
# 本番運用前のテストや設定確認時にtrue推奨
export DRY_RUN=false

# =============================================================================
# 自動化機能制御
# =============================================================================

# ISSUE自動実装（simple～mediumレベルのISSUEをClaude Codeで自動実装）
# true: 実装可能と判定されたISSUEを自動でブランチ作成・実装・PR作成
# false: ISSUE作成のみ、実装は手動
export AUTO_IMPLEMENT=false

# PR自動レビュー（作成されたプルリクエストを自動でレビュー）
# コードの品質・セキュリティ・パフォーマンスの観点でレビュー実行
export AUTO_REVIEW=true

# 既存ISSUE改善（曖昧・不完全なISSUEを詳細化・構造化）
# タイトル明確化、説明詳細化、受入条件追加など
export AUTO_IMPROVE_ISSUES=true

# ワークフロー監視（GitHub Actions失敗時の自動ISSUE作成）
# CI/CDパイプラインの問題を自動検出・追跡
export AUTO_MONITOR_WORKFLOWS=true

# リクエストISSUE処理（'request'ラベル付きISSUEの詳細化）
# 人間の簡単なリクエストを技術仕様として展開
export PROCESS_REQUEST_ISSUES=true

# =============================================================================
# ログ・デバッグ設定
# =============================================================================

# ログファイルパス（実行履歴・エラー情報の保存先）
# ディレクトリが存在しない場合は事前作成が必要
export LOG_FILE="/var/log/claude_dev_automation.log"

# デバッグモード（詳細な内部動作情報の出力）
# 問題調査時や初期設定時にtrue推奨
export DEBUG_MODE=false

# 詳細ログ（Claude Codeとの通信内容も記録）
# API呼び出しやレスポンス内容も含む詳細ログ
export VERBOSE_LOGGING=true

# =============================================================================
# GitHub連携設定
# =============================================================================

# GitHubアカウント名（リポジトリオーナー）
export GITHUB_OWNER="your-username"

# リポジトリ名
export GITHUB_REPO="your-repository"

# 自動実装用ブランチのプレフィックス
# 例: claude-auto/issue-123 のような形式でブランチ作成
export BRANCH_PREFIX="claude-auto"

# デフォルトブランチ名（通常は main または master）
export DEFAULT_BRANCH="main"

# =============================================================================
# Claude Code CLI設定
# =============================================================================

# 使用するClaude モデル（現在は claude-sonnet-4 を推奨）
export CLAUDE_MODEL="claude-sonnet-4"

# Claude CLI実行タイムアウト（秒）
# 複雑な実装や大きなファイル処理時は値を大きくする
export CLAUDE_TIMEOUT=300

# Claude CLI失敗時のリトライ回数
export CLAUDE_MAX_RETRIES=3

# 権限チェックスキップ（危険：false推奨）
# true: --dangerously-skip-permissions を使用（テスト環境のみ）
# false: 通常の対話的権限確認
export CLAUDE_SKIP_PERMISSIONS=false

# =============================================================================
# ISSUE作成・管理設定
# =============================================================================

# 作成対象のISSUEタイプ（カンマ区切り）
# bug: バグ修正, feature: 新機能, improvement: 改善, documentation: ドキュメント
# security: セキュリティ, performance: パフォーマンス
export ISSUE_TYPES="bug,feature,improvement,documentation,security,performance"

# 除外するラベル（これらのラベルがついたISSUEは改善対象外）
export EXCLUDED_LABELS="wontfix,duplicate,invalid"

# 最小優先度（この優先度以上のISSUEのみ作成）
# low: 軽微な改善も含む, medium: 中程度以上, high: 重要なもののみ
export MIN_PRIORITY="medium"

# ISSUE自動アサイン（作成したISSUEに自動でアサインするか）
export AUTO_ASSIGN_ISSUES=false

# デフォルトアサイン先（AUTO_ASSIGN_ISSUESがtrueの場合）
export DEFAULT_ASSIGNEE=""

# リクエストISSUEのラベル名（人間が作成するシンプルなリクエスト用）
export REQUEST_LABEL="request"

# リクエスト処理後の自動クローズ（詳細ISSUE作成後に元リクエストをクローズ）
export AUTO_CLOSE_REQUESTS=true

# リクエスト処理モード
# simple: 基本的な詳細化, detailed: 詳細分析, comprehensive: 包括的分析
export REQUEST_PROCESSING_MODE="detailed"

# ISSUEテンプレート必須（ISSUEテンプレートが見つからない場合の動作）
export REQUIRE_ISSUE_TEMPLATE=false

# CLAUDE.md必須（CLAUDE.mdが見つからない場合の動作）
export REQUIRE_CLAUDE_MD=false

# =============================================================================
# 自動実装設定
# =============================================================================

# 実装戦略（自動実装時の慎重さレベル）
# conservative: 慎重（simple complexityのみ）
# moderate: 中程度（simple～medium complexity）
# aggressive: 積極的（medium～complex complexityも実装）
export IMPLEMENTATION_STRATEGY="conservative"

# テスト自動作成（実装時にテストコードも生成するか）
export AUTO_CREATE_TESTS=true

# ドキュメント自動更新（実装に合わせてREADMEなども更新）
export AUTO_UPDATE_DOCS=true

# コミットメッセージプレフィックス
# 例: "fix: implement #123 - ユーザー認証機能追加"
export COMMIT_MESSAGE_PREFIX="fix:"

# 手動承認要求（実装後のマージに手動承認を必要とするか）
# true: PR作成まで自動、マージは手動
# false: 条件によっては自動マージも実行
export REQUIRE_MANUAL_APPROVAL=true

# =============================================================================
# コードレビュー設定
# =============================================================================

# レビュー基準の厳しさ
# lenient: 寛容（重大な問題のみ指摘）
# normal: 標準（一般的な問題も指摘）
# strict: 厳格（軽微な問題も詳細に指摘）
export REVIEW_CRITERIA="strict"

# 簡単な変更の自動承認（軽微な修正を自動でApprove）
# セキュリティリスクがあるため通常はfalse推奨
export AUTO_APPROVE_SIMPLE=false

# 変更要求の閾値（この重要度以上の問題で変更要求）
# low: 軽微な問題でも変更要求, medium: 中程度以上, high: 重大な問題のみ
export REQUEST_CHANGES_THRESHOLD="medium"

# レビュータイムアウト（秒、長時間のレビューを制限）
export REVIEW_TIMEOUT=1800

# =============================================================================
# フィルタリング・優先度設定
# =============================================================================

# 重点分析領域（ISSUE生成時に特に注目する分野）
export FOCUS_AREAS="security,performance,maintainability,testing"

# 除外パターン（分析対象外のファイルパターン）
# ドキュメント、設定ファイルなど変更頻度の低いファイル
export EXCLUDED_PATTERNS="*.md,*.txt,LICENSE,*.json"

# 優先ファイル（特に重点的に分析するファイルパターン）
# ビジネスロジックが含まれるコアファイル
export PRIORITY_FILES="src/**/*.js,src/**/*.ts,**/*.py,**/*.go"

# =============================================================================
# 通知・連携設定
# =============================================================================

# Slack通知（Webhook URL、空の場合は無効）
# 重要なイベント発生時にSlackチャンネルに通知
export SLACK_WEBHOOK_URL=""

# Discord通知（Webhook URL、空の場合は無効）
export DISCORD_WEBHOOK_URL=""

# メール通知先（カンマ区切り、空の場合は無効）
export EMAIL_RECIPIENTS=""

# 通知対象イベント（カンマ区切り）
# error: エラー発生, completion: 処理完了, critical_review: 重要なレビュー結果
export NOTIFICATION_EVENTS="error,completion,critical_review"

# =============================================================================
# パフォーマンス・制限設定
# =============================================================================

# API呼び出し間隔（秒、レート制限回避）
export RATE_LIMIT_DELAY=5

# ログファイルバックアップ保持数
export BACKUP_COUNT=30

# 古いブランチの自動削除（実装完了後のクリーンアップ）
export CLEANUP_OLD_BRANCHES=true

# ブランチ保持期間（日数、この期間後に自動削除）
export BRANCH_RETENTION_DAYS=7

# 最大同時実行操作数（リソース使用量制限）
export MAX_CONCURRENT_OPERATIONS=3

# 操作タイムアウト（秒、個別操作の制限時間）
export OPERATION_TIMEOUT=3600

# キャッシュ有効化（分析結果の一時保存で高速化）
export CACHE_ENABLED=true

# キャッシュ保持時間（秒）
export CACHE_TTL=3600

# =============================================================================
# AI動作制御設定
# =============================================================================

# AI創造性レベル（生成内容の創造性vs安全性）
# conservative: 安全重視、既知のパターンのみ
# balanced: バランス型、実用的な提案
# creative: 創造的、革新的だが実験的な提案も含む
export AI_CREATIVITY_LEVEL="balanced"

# 実験的機能の有効化（新機能のテスト利用）
# 本番環境ではfalse推奨
export ENABLE_EXPERIMENTAL_FEATURES=false

# カスタムプロンプトテンプレートディレクトリ
# プロジェクト固有のプロンプトテンプレートの格納場所
export CUSTOM_PROMPT_TEMPLATES_DIR=""

# =============================================================================
# セキュリティ設定
# =============================================================================

# 署名付きコミット要求（GPG署名の強制）
export REQUIRE_SIGNED_COMMITS=false

# マージ前セキュリティスキャン（脆弱性チェックの実行）
export SECURITY_SCAN_BEFORE_MERGE=true

# 脆弱性許容レベル
# low: 軽微な脆弱性でもブロック
# medium: 中程度以上でブロック  
# high: 重大な脆弱性のみブロック
export VULNERABILITY_THRESHOLD="medium"

# =============================================================================
# プロジェクト固有設定
# =============================================================================

# カスタムプロンプトプレフィックス（Claude分析時の前置詞）
# プロジェクトコンテキストをClaudeに提供
export CUSTOM_PROMPT_PREFIX="このプロジェクトは${PROJECT_NAME}(${PROJECT_TYPE})です。"

# 技術スタック（分析・実装時の参考情報）
export TECH_STACK="javascript,react,node.js"

# コーディング標準URL（参照する規約ドキュメント）
export CODING_STANDARDS_URL=""

# プロジェクトガイドライン（追加の開発ルール）
export PROJECT_GUIDELINES=""

# =============================================================================
# 環境・デプロイ設定
# =============================================================================

# 実行環境（動作制御の参考情報）
# development: 開発環境、積極的な自動化
# staging: ステージング環境、制限付き自動化
# production: 本番環境、慎重な自動化
export ENVIRONMENT="production"

# マージ時自動デプロイ（PR承認後の自動デプロイ実行）
export DEPLOY_ON_MERGE=false

# E2Eテスト実行（実装後の統合テスト）
export RUN_E2E_TESTS=true

# =============================================================================
# 監視・分析設定
# =============================================================================

# メトリクス収集（実行統計の記録）
export COLLECT_METRICS=true

# メトリクス送信先エンドポイント（外部分析サービス）
export METRICS_ENDPOINT=""

# 分析機能有効化（使用パターンの分析）
export ANALYTICS_ENABLED=false

# =============================================================================
# 使用例とプリセット（動的設定）
# =============================================================================

# 開発フェーズ別プリセット
# PROJECT_PHASE環境変数で制御可能

# 開発初期段階用プリセット
if [ "$PROJECT_PHASE" = "initial" ]; then
    export AUTO_IMPLEMENT=false          # 実装は手動で慎重に
    export MAX_ISSUES=10                 # 多くのアイデアISSUEを生成
    export FOCUS_AREAS="architecture,documentation,setup"
    export AI_CREATIVITY_LEVEL="creative" # 革新的なアイデアを歓迎
fi

# アクティブ開発用プリセット
if [ "$PROJECT_PHASE" = "active" ]; then
    export AUTO_IMPLEMENT=true           # 積極的な自動実装
    export MAX_IMPLEMENTATIONS=5         # 多くの機能を並行実装
    export FOCUS_AREAS="features,testing,performance"
    export AUTO_REVIEW=true
fi

# メンテナンス用プリセット
if [ "$PROJECT_PHASE" = "maintenance" ]; then
    export AUTO_IMPLEMENT=false          # 手動で慎重な変更
    export MAX_ISSUES=3                  # 必要最小限の改善のみ
    export FOCUS_AREAS="security,performance,dependencies"
    export REVIEW_CRITERIA="strict"      # 厳格なレビュー基準
fi

# 環境別セキュリティプリセット
if [ "$ENVIRONMENT" = "production" ]; then
    export REQUIRE_MANUAL_APPROVAL=true  # 本番では必ず手動承認
    export SECURITY_SCAN_BEFORE_MERGE=true
    export AUTO_APPROVE_SIMPLE=false     # 自動承認無効
    export IMPLEMENTATION_STRATEGY="conservative"
fi

# =============================================================================
# カスタム関数（プロジェクト固有の処理）
# =============================================================================

# プロジェクト固有の前処理
custom_pre_process() {
    # 例: 特定の環境変数チェック、外部サービス接続確認など
    log "カスタム前処理を実行中..."
    
    # プロジェクト固有の初期化処理をここに追加
    # 例：
    # - データベース接続チェック
    # - 外部API認証確認  
    # - 必要なディレクトリ作成
    # - プロジェクト固有の環境変数検証
}

# プロジェクト固有の後処理
custom_post_process() {
    # 例: 実行結果の外部システム連携、カスタム通知など
    log "カスタム後処理を実行中..."
    
    # プロジェクト固有のクリーンアップや通知処理をここに追加
    # 例：
    # - カスタムメトリクス送信
    # - プロジェクト管理ツール更新
    # - チーム固有の通知送信
    # - ログのアーカイブ処理
}

# =============================================================================
# 使用方法ガイド
# =============================================================================

# 1. 基本的な使用方法
# source /path/to/config.env && ./claude_dev_automation.sh

# 2. 環境変数として一括設定
# export $(grep -v '^#' /path/to/config.env | grep -v '^$' | xargs)
# ./claude_dev_automation.sh

# 3. 特定の設定のみ上書き
# PROJECT_PATH=/custom/path AUTO_IMPLEMENT=true ./claude_dev_automation.sh

# 4. 開発フェーズ別設定
# PROJECT_PHASE=initial source config.env && ./claude_dev_automation.sh

# 5. 安全な本番実行（権限チェック有効）
# ENVIRONMENT=production DRY_RUN=false source config.env && ./claude_dev_automation.sh

# 6. テスト環境での完全自動化
# CLAUDE_SKIP_PERMISSIONS=true ENVIRONMENT=development source config.env && ./claude_dev_automation.sh

# =============================================================================
# 設定検証・トラブルシューティング
# =============================================================================

# 設定値検証関数（設定ファイル読み込み後に実行推奨）
validate_config() {
    local errors=0
    
    # 必須パスの存在確認
    if [ ! -d "$PROJECT_PATH" ]; then
        echo "ERROR: PROJECT_PATH ディレクトリが存在しません: $PROJECT_PATH"
        errors=$((errors + 1))
    fi
    
    # ログディレクトリの作成
    local log_dir=$(dirname "$LOG_FILE")
    if [ ! -d "$log_dir" ]; then
        echo "INFO: ログディレクトリを作成します: $log_dir"
        mkdir -p "$log_dir"
    fi
    
    # タイムアウト値の妥当性チェック
    if [ "$CLAUDE_TIMEOUT" -lt 60 ]; then
        echo "WARNING: CLAUDE_TIMEOUT が短すぎます（${CLAUDE_TIMEOUT}秒）。300秒以上を推奨。"
    fi
    
    # 危険な設定の警告
    if [ "$CLAUDE_SKIP_PERMISSIONS" = "true" ] && [ "$ENVIRONMENT" = "production" ]; then
        echo "WARNING: 本番環境で権限スキップが有効になっています。データ損失のリスクがあります。"
        errors=$((errors + 1))
    fi
    
    # GitHub設定の確認
    if [ -z "$GITHUB_OWNER" ] || [ -z "$GITHUB_REPO" ]; then
        echo "ERROR: GitHub設定（GITHUB_OWNER/GITHUB_REPO）が不完全です。"
        errors=$((errors + 1))
    fi
    
    if [ $errors -gt 0 ]; then
        echo "設定エラーが検出されました。設定を確認してください。"
        return 1
    else
        echo "設定検証完了：問題なし"
        return 0
    fi
}

# 使用例：設定読み込み後に検証実行
# source config.env && validate_config && ./claude_dev_automation.sh