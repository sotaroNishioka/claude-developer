# Claude Developer 自動化システム ワークフロー

## 🚨 概要

このシステムは、4つの専門プロンプトが独立実行されることで、GitHub上での開発プロセス全体を自動化します。各プロンプトはステートレスで動作し、ISSUEラベルとコメントによるステータス管理により重複作業を防止します。

## 🔄 メインワークフロー

### 1. 人間によるリクエスト作成
```
[人間] → ISSUE作成 + label:request
```

### 2. Issue Improver
```
Input:  label:request + is:open
Check:  重複作業・既存処理確認
Action: request → formal ISSUE変換
Output: status:ready + 新ISSUE作成 + request ISSUE close
```

### 3. Implementer
```
Input:  status:ready
Check:  既存PR存在確認 + 重複実装防止
Action: コード実装 + テスト作成 + PR作成
Output: status:pr-created + PR #XXX
```

### 4. PR Reviewer
```
Input:  status:pr-created
Check:  レビュー重複確認
Action: 多角的PR評価 + コメント投稿
Output: status:approved OR status:changes-requested
```

### 5A. マージパス (APPROVED)
```
status:approved → [人間によるマージ] → status:completed
```

### 5B. 修正パス (CHANGES_REQUESTED)
```
Input:  status:changes-requested
Check:  [MUST FIX]/[SHOULD FIX]コメント存在確認
Action: 修正実装 + コメント返信 + re-request review
Output: status:fix-completed → PR Reviewerに戻る
```

## 🏷️ ステータスラベル体系

### メインフロー
```
status:request          # 人間からのリクエスト（初期状態）
status:analyzing        # Issue Improver 分析中
status:ready            # 実装準備完了
status:implementing     # Implementer 実装中
status:pr-created       # PR作成済み
status:reviewing        # PR Reviewer レビュー中
status:re-reviewing     # 修正後の再レビュー中 [NEW]
status:approved         # レビュー承認済み
status:changes-requested # 修正要求
status:fixing           # PR Responder 修正中
status:fix-completed    # 修正完了（再レビュー待ち）
status:completed        # 完了
```

### サブフロー
```
status:under-discussion # レビューで議論継続
status:blocked          # 外部要因でブロック
status:on-hold          # 一時保留
```

### 作業者指定タグ
```
worker:issue-improver
worker:implementer
worker:pr-reviewer
worker:pr-responder
worker:issue-triager
worker:cicd-monitor
worker:codebase-analyzer
worker:qa-strategist
worker:documentation-manager
```

## 🔒 重複防止メカニズム

### 処理基準ベース判別
- 既に処理が完了している作業の重複実行を防止
- コメントの内容で最終作業状況を確認

### ステータスベース判別
- 進行中ステータス（`implementing`, `reviewing`, `fixing`）がある場合は処理スキップ
- 完了ステータス（`completed`）の場合は処理スキップ

### リソースベース判別
- 既存PR確認による重複実装防止
- 既存ブランチ確認による競合回避

## 🔄 サポートワークフロー

### Issue Triager
```
Input:  新規作成されたISSUE（ラベルなし）
Action: 優先度・分類・工数見積もり
Output: priority/type/complexity ラベル付与
```

### CI/CD Monitor
```
Input:  ワークフロー失敗検出
Action: 原因分析 + 対応ISSUE作成
Output: 障害対応ISSUE + 緊急通知
```

### Codebase Analyzer
```
Input:  プロジェクトファイル分析
Action: 技術的負債・改善機会の特定
Output: 改善提案ISSUE作成
```

### QA Strategist
```
Input:  テストファイル・カバレッジ分析
Action: テスト戦略改善提案
Output: テスト改善ISSUE作成
```

### Documentation Manager
```
Input:  ドキュメントファイル分析
Action: 文書の正確性・最新性確認 + CLAUDE.md同期
Output: ドキュメント改善 + 直接更新
```

## 📊 ステータス確認方針

### ISSUEコメント依存
```
📝 **Implementer Status Update**
**Timestamp**: 2025-05-31 13:21:32 UTC
**Status**: READY → IMPLEMENTING  
**Action**: Started implementation
**Branch**: feature/issue-123-user-auth
**PR**: Will be created upon completion
**Estimated Completion**: 2 hours
**Blocking**: None
```

### ラベル組み合わせ例
```
ISSUE #123:
- status:implementing
- worker:implementer  
- priority:high
- type:feature
- complexity:medium
```

## 🚨 エラー対応

### 失敗時の状況復旧
- 作業開始時にステータス更新、失敗時は元に戻す
- エラー詳細をコメントで記録
- 手動介入が必要な場合は `status:blocked` に設定

### 人間による介入ポイント
- `status:blocked` ラベルが付いたISSUE
- `status:under-discussion` で議論が長期継続
- CI/CD障害で自動修復不可能な問題
- 最終的なPRマージ判定

## 📝 品質保証

### ヘルスチェック項目
- 各プロンプトの実行成功率
- ステータス遷移の正常性  
- 滞留ISSUEの検出
- 重複処理の発生有無

### パフォーマンス指標
- リードタイム: request → completed
- サイクルタイム: ready → pr-created  
- レビュー時間: pr-created → approved
- 修正時間: changes-requested → fix-completed

## 📈 実装タイミングの柔軟性

各プロンプトは以下の特徴を持ちます：

### 独立性
- 各プロンプトは独立して実行可能
- 前回の実行状況に依存しない設計
- ステータス変更による適切な処理スキップ

### 柔軟なスケジューリング
- 任意のタイミングで実行可能
- 負荷に応じた分散実行可能
- 緊急時の優先処理対応

### 完全自動化
- 同一作業の重複実行を自動回避
- ステータス確認による適切な処理スキップ
- エラー時の適切な状況復旧

これにより、人間の創造的作業に集中できる包括的で柔軟な開発自動化システムが実現されます。

## 🔧 重要な改善点 [NEW]

### ステータス遷移の明確化
1. **再レビュー状態の分離**: `status:re-reviewing` を新設
   - `fix-completed` → `re-reviewing` → `approved/changes-requested`
   - 初回レビューと修正後レビューの区別

2. **Worker排他制御の強化**
   - 同一Issue/PRでの並行Worker実行防止
   - `worker:*` ラベルによる処理中表示
   - 処理完了時のworkerラベル除去

3. **CI/CD統合の改善**
   - CI/CD Monitor によるISSUE作成を既存フローに統合
   - `priority:critical` + `worker:cicd-monitor` の組み合わせ
   - 緊急度判定基準の統一

### エラーハンドリング強化
- 無限ループ防止機構
- デッドロック検出と自動復旧
- 異常状態の人間への通知

### メトリクス収集
- 各ステータスでの滞留時間
- Worker別の処理時間
- エラー発生率とパターン分析